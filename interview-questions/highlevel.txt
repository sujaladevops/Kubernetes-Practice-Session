1.What is the difference between Docker and Kubernetes?
Docker is a container platform, where as Kubernetes is a container orchestration environment that offers capabilities like 
Auto healing, Auto Scaling, Clustering and Enterprise Level support like Load Balancing.


2. What are the main components of Kubernetes Architecture?
On a broad level, it can be divide kubernetes components into two parts.
i. Control Plane
   a. API Server:  This is the central point of communication for interacting with the cluster. 
        Users and other components send requests to the API server to manage workloads and access cluster information.
   b. Kube Scheduler: IThis component assigns pods to nodes in the cluster based on various factors like resource availability, pod requirements, and affinity/anti-affinity rules.
   c. ETCD: This is a distributed key-value store that stores the current state of the cluster, including the desired state of applications, their running pods, and configuration data. 
   d. Controller Manager: This runs multiple controllers, each responsible for managing specific aspects of the cluster, such as deployments, replicasets, and nodes.
      C-CM: Cloud Controller Manager: This is for any of the Cloud(AKS, EKS)
ii. Data Plane
    a. Kubelet: This agent on each node communicates with the API server and ensures pods are running according to the desired state. 
       It manages containers, downloads container images, and reports back to the control plane.
    b. Container Runtime: This software actually runs the containers on the node. Popular options include Docker, containerd, and CRI-O.
    c. Kube-proxy: responsible for maintaining network connectivity between services and pods within the cluster. It acts as a network proxy on each node, ensuring smooth communication between pods across different nodes and between services exposed outside the cluster.  

3. What are the differenes between Docekr Swarm and Kubernetes?
   Kubernetes is a standard and suited for large Organizations as it offers more scalability, networking capabilities like
   policies and huge third party  ecosystem support.

4. What is the difference between Docker container and Kubernetes Pod?
   A pod in kubernetes is a runtime specification of a container in docker. A pod provides more declarative way of defining using
   YAML files and we can run more than one container in a pod.

5. What is a namespace in Kubernetes?
   In Kubernetes namespace is a logical isolation of resources, network policies, RBAC and everything.
   For example, there are two projects using same k8s cluster. One proect can use ns1 and other project
   can use ns2 without any overlap and authentication problems.

6. What is the role of kube proxy?
   Kube-proxy works by maintaining a set of network rules on each node in teh cluster,
   whcih are updated dynamically as services are added to a service, the request is intercepted by kube-proxy on the node where it was received.
   Kube-proxy then looks up the destination endpoint for the service and routes the request accordingly.

7. What are teh different types of services within kubernetes?
   There are three different types of services that a uer can create.
   i. Cluster IP Mode
   ii. Node Port Mode
   iii. Load Balancer Mode

8. what is the difference between NodePort and LoadBalancer type service?
   When a service is created a NodePort type, the kube-proxy updates the IPTables with NodeIP addresa and port that is chosen in the service configuration to access the pods.
   Where as if you crete a Service as type LoadBalancer, the cloud control manager creates load balancer IP using the underlying cloud provider logic in the C-CM. Users can access sevices using the external IP.

9. What is the role of kubelet?
   Kubelet manages the containers that are scheduled to run on that node. It ensures that the containers are running and healthy, and that the resources they need are available.
   kubelet communications with kubernetes API server to get information about the containers that should be running on the node, and then sarts and stops the containers as needed to maintain the desired state.
   It also monitors the containers to ensure that they are running correctly, and restarts them if necessary.

10. Day to Day activities on Kubernetes?
    